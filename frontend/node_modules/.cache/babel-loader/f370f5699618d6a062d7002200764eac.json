{"ast":null,"code":"const parse = require('csv-parse');\n\nconst assert = require('assert');\n\nconst output = []; // Create the parser\n\nconst parser = parse({\n  delimiter: '    '\n}); // Use the readable stream api\n\nparser.on('readable', function () {\n  let record;\n\n  while (record = parser.read()) {\n    output.push(record);\n  }\n}); // Catch any error\n\nparser.on('error', function (err) {\n  console.error(err.message);\n}); // When we are done, test that the parsed output matched what expected\n\nparser.on('end', function () {\n  console.log(output); // assert.deepStrictEqual(\n  //     output,\n  //     [\n  //         ['root', 'x', '0', '0', 'root', '/root', '/bin/bash'],\n  //         ['someone', 'x', '1022', '1022', '', '/home/someone', '/bin/bash']\n  //     ]\n  // )\n});\n\nconst cargarCsv = csv => {\n  parser.write(csv);\n}; // Write data to the stream\n// Close the readable stream\n\n\nparser.end();","map":{"version":3,"sources":["C:/Users/Jonatan/Desktop/Metodos Agiles/AppAsistencias/app-asistencias/frontend/src/components/asistencias/csvParser.js"],"names":["parse","require","assert","output","parser","delimiter","on","record","read","push","err","console","error","message","log","cargarCsv","csv","write","end"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,WAAD,CAArB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,MAAM,GAAG,EAAf,C,CACA;;AACA,MAAMC,MAAM,GAAGJ,KAAK,CAAC;AACjBK,EAAAA,SAAS,EAAE;AADM,CAAD,CAApB,C,CAGA;;AACAD,MAAM,CAACE,EAAP,CAAU,UAAV,EAAsB,YAAY;AAC9B,MAAIC,MAAJ;;AACA,SAAOA,MAAM,GAAGH,MAAM,CAACI,IAAP,EAAhB,EAA+B;AAC3BL,IAAAA,MAAM,CAACM,IAAP,CAAYF,MAAZ;AACH;AACJ,CALD,E,CAOA;;AACAH,MAAM,CAACE,EAAP,CAAU,OAAV,EAAmB,UAAUI,GAAV,EAAe;AAC9BC,EAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,OAAlB;AACH,CAFD,E,CAIA;;AACAT,MAAM,CAACE,EAAP,CAAU,KAAV,EAAiB,YAAY;AACzBK,EAAAA,OAAO,CAACG,GAAR,CAAYX,MAAZ,EADyB,CAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CATD;;AAWA,MAAMY,SAAS,GAAIC,GAAD,IAAS;AACvBZ,EAAAA,MAAM,CAACa,KAAP,CAAaD,GAAb;AACH,CAFD,C,CAIA;AACA;;;AACAZ,MAAM,CAACc,GAAP","sourcesContent":["const parse = require('csv-parse')\r\nconst assert = require('assert')\r\nconst output = []\r\n// Create the parser\r\nconst parser = parse({\r\n    delimiter: '    '\r\n})\r\n// Use the readable stream api\r\nparser.on('readable', function () {\r\n    let record\r\n    while (record = parser.read()) {\r\n        output.push(record)\r\n    }\r\n})\r\n\r\n// Catch any error\r\nparser.on('error', function (err) {\r\n    console.error(err.message)\r\n})\r\n\r\n// When we are done, test that the parsed output matched what expected\r\nparser.on('end', function () {\r\n    console.log(output);\r\n    // assert.deepStrictEqual(\r\n    //     output,\r\n    //     [\r\n    //         ['root', 'x', '0', '0', 'root', '/root', '/bin/bash'],\r\n    //         ['someone', 'x', '1022', '1022', '', '/home/someone', '/bin/bash']\r\n    //     ]\r\n    // )\r\n})\r\n\r\nconst cargarCsv = (csv) => {\r\n    parser.write(csv);\r\n}\r\n\r\n// Write data to the stream\r\n// Close the readable stream\r\nparser.end()"]},"metadata":{},"sourceType":"module"}