{"ast":null,"code":"const parse = require('csv-parse');\n\nconst assert = require('assert');\n\nconst output = []; // Create the parser\n\nconst parser = parse({\n  delimiter: '    '\n}); // Use the readable stream api\n\nparser.on('readable', function () {\n  let record;\n\n  while (record = parser.read()) {\n    output.push(record);\n  }\n}); // Catch any error\n\nparser.on('error', function (err) {\n  console.error(err.message);\n}); // When we are done, test that the parsed output matched what expected\n\nparser.on('end', function () {\n  assert.deepStrictEqual(output, [['root', 'x', '0', '0', 'root', '/root', '/bin/bash'], ['someone', 'x', '1022', '1022', '', '/home/someone', '/bin/bash']]);\n}); // Write data to the stream\n\nparser.write(\"root:x:0:0:root:/root:/bin/bash\\n\");\nparser.write(\"someone:x:1022:1022::/home/someone:/bin/bash\\n\"); // Close the readable stream\n\nparser.end();","map":{"version":3,"sources":["C:/Users/Jonatan/Desktop/Metodos Agiles/AppAsistencias/app-asistencias/frontend/src/components/asistencias/csvParser.js"],"names":["parse","require","assert","output","parser","delimiter","on","record","read","push","err","console","error","message","deepStrictEqual","write","end"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,WAAD,CAArB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAME,MAAM,GAAG,EAAf,C,CACA;;AACA,MAAMC,MAAM,GAAGJ,KAAK,CAAC;AACjBK,EAAAA,SAAS,EAAE;AADM,CAAD,CAApB,C,CAGA;;AACAD,MAAM,CAACE,EAAP,CAAU,UAAV,EAAsB,YAAY;AAC9B,MAAIC,MAAJ;;AACA,SAAOA,MAAM,GAAGH,MAAM,CAACI,IAAP,EAAhB,EAA+B;AAC3BL,IAAAA,MAAM,CAACM,IAAP,CAAYF,MAAZ;AACH;AACJ,CALD,E,CAMA;;AACAH,MAAM,CAACE,EAAP,CAAU,OAAV,EAAmB,UAAUI,GAAV,EAAe;AAC9BC,EAAAA,OAAO,CAACC,KAAR,CAAcF,GAAG,CAACG,OAAlB;AACH,CAFD,E,CAGA;;AACAT,MAAM,CAACE,EAAP,CAAU,KAAV,EAAiB,YAAY;AACzBJ,EAAAA,MAAM,CAACY,eAAP,CACIX,MADJ,EAEI,CACI,CAAC,MAAD,EAAS,GAAT,EAAc,GAAd,EAAmB,GAAnB,EAAwB,MAAxB,EAAgC,OAAhC,EAAyC,WAAzC,CADJ,EAEI,CAAC,SAAD,EAAY,GAAZ,EAAiB,MAAjB,EAAyB,MAAzB,EAAiC,EAAjC,EAAqC,eAArC,EAAsD,WAAtD,CAFJ,CAFJ;AAOH,CARD,E,CASA;;AACAC,MAAM,CAACW,KAAP,CAAa,mCAAb;AACAX,MAAM,CAACW,KAAP,CAAa,gDAAb,E,CACA;;AACAX,MAAM,CAACY,GAAP","sourcesContent":["const parse = require('csv-parse')\r\nconst assert = require('assert')\r\nconst output = []\r\n// Create the parser\r\nconst parser = parse({\r\n    delimiter: '    '\r\n})\r\n// Use the readable stream api\r\nparser.on('readable', function () {\r\n    let record\r\n    while (record = parser.read()) {\r\n        output.push(record)\r\n    }\r\n})\r\n// Catch any error\r\nparser.on('error', function (err) {\r\n    console.error(err.message)\r\n})\r\n// When we are done, test that the parsed output matched what expected\r\nparser.on('end', function () {\r\n    assert.deepStrictEqual(\r\n        output,\r\n        [\r\n            ['root', 'x', '0', '0', 'root', '/root', '/bin/bash'],\r\n            ['someone', 'x', '1022', '1022', '', '/home/someone', '/bin/bash']\r\n        ]\r\n    )\r\n})\r\n// Write data to the stream\r\nparser.write(\"root:x:0:0:root:/root:/bin/bash\\n\")\r\nparser.write(\"someone:x:1022:1022::/home/someone:/bin/bash\\n\")\r\n// Close the readable stream\r\nparser.end()"]},"metadata":{},"sourceType":"module"}